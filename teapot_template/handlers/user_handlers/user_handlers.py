from aiogram import (Router, Bot, F)
from aiogram.types import (Message, FSInputFile, ChatMemberUpdated, CallbackQuery, ReplyKeyboardRemove)
from aiogram.filters import (Command, ChatMemberUpdatedFilter, KICKED, MEMBER, StateFilter)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state

from logging import *
from logging.config import dictConfig

from teapot_template.lexicon.lexicon_ru import DICTIONARY_RU

from teapot_template.config_data.config import load_config
from teapot_template.config_data.logging.logging_settings import logging_config

from teapot_template.keyboards.reply_keyboards.reply_menu import start_kb
from teapot_template.keyboards.inline_keyboards.inline_menu_kb import menu_kb
from teapot_template.keyboards.inline_keyboards.tea_parties_menu import tea_parties_kb
from teapot_template.keyboards.inline_keyboards.tea_keyboard import tea_kb
from teapot_template.keyboards.inline_keyboards.choice_tea_keyboard import choice_tea_kb
from teapot_template.keyboards.utils_kbs import dont_want_kb
from teapot_template.keyboards.inline_keyboards.confirm_kb import confirm_kb

from teapot_template.database.database_insert import insert_user_state_db
from teapot_template.database.database_update import update_state_in_user_state_db

from teapot_template.states.database_states import is_in_db
from teapot_template.states.FSM_states import FSMFillForm

config = load_config('.env')
dictConfig(logging_config)

logger = getLogger(__name__)
logger.propagate = False

bot = Bot(token=config.tg_bot.token)
router = Router()

# –ø–æ–¥–æ–±–∏–µ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏

tea_dict: dict[str: int | str | None] = {
    'user_id': 0,
    'type': "‚ùå",
    'tea_type': "‚ùå",
    'tea_name': "‚ùå",
    'prod_year': "‚ùå",
    'rate': "‚ùå",
    'descr': "‚ùå"
}

party_dict: dict[str: int | str | None] = {
    'user_id': 0,
    'party_id': 0,
    'tea_id': 0,
    'grams': "‚ùå",
    'water_temp': "‚ùå",
    'date': ""
}


@router.callback_query(F.data == 'new_button_pressed')
async def process_select_party_press(callback: CallbackQuery):
    print(callback)
    logger.info(f'chat_id = {callback.message.chat.id} - user_id = {callback.message.from_user.id}')
    await callback.message.answer(text='!!!')
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–æ—Ç–∞
@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=KICKED))
async def process_user_blocked_bot(event: ChatMemberUpdated):
    update_state_in_user_state_db(user_id=event.from_user.id, state='inactive')
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {event.from_user.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞')


@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=MEMBER))
async def process_user_unblock_bot(event: ChatMemberUpdated):
    update_state_in_user_state_db(user_id=event.from_user.id, state='active')
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {event.from_user.id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@router.message(Command("start"), StateFilter(default_state))
async def start_handler(message: Message):
    print(type(message.from_user.id))
    logger.info(f'chat_id = {message.chat.id} - user_id = {message.from_user.id}')
    await message.reply(text=f"üëã–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}!</b> –Ø <b>TeaPot</b> - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π "
                             f"–ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å—Ñ–µ—Ä–µ —á–∞–π–Ω—ã—Ö –¥–µ–ª.‚òï"
                             f"\n\n–ï—Å–ª–∏ —Ç–µ–±–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è <b>–ø–æ–º–æ—â—å</b>, –ø—Ä–∏—à–ª–∏ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É <b>/help</b>",
                        reply_markup=start_kb)
    if is_in_db(message.from_user.id):
        insert_user_state_db(user_id=message.from_user.id, state='active', total_parties=0)


@router.message(Command("help"), StateFilter(default_state))
async def help_handler(message: Message):
    logger.info(f'chat_id = {message.chat.id} - user_id = {message.from_user.id}')
    await message.reply(DICTIONARY_RU['USUAL_COMMANDS']['/help'])


@router.message(Command("cancel"), ~StateFilter(default_state))
async def cancel_handler(message: Message, state: FSMContext):
    logger.info(f'chat_id = {message.chat.id} - user_id = {message.from_user.id}')
    await message.answer(text=DICTIONARY_RU['USUAL_COMMANDS']['/cancel'],
                         reply_markup=start_kb)
    await state.set_state(default_state)


@router.message(Command("menu"))
async def menu_handler(message: Message, state: FSMContext):
    logger.info(f'chat_id = {message.chat.id} - user_id = {message.from_user.id}')
    photo = FSInputFile(r'C:\Users\1\Desktop\For TeaPot_tg\TeaPot_tg\teapot_bot\menu_ru.jpg')
    await message.answer_photo(photo=photo,
                               caption=DICTIONARY_RU['REPLY_BUTTONS']['MAIN_KB']['MENU']['ANSWER'],
                               reply_markup=menu_kb)
    await state.set_state(default_state)


# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö REPLY-–ú–ï–ù–Æ

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é

@router.message(F.text == DICTIONARY_RU['REPLY_BUTTONS']['MAIN_KB']['MENU']['NAME'], StateFilter(default_state))
async def menu_button_handler(message: Message):
    logger.info(f'chat_id = {message.chat.id} - user_id = {message.from_user.id}')
    photo = FSInputFile(r'C:\Users\1\Desktop\For TeaPot_tg\TeaPot_tg\teapot_bot\menu_ru.jpg')
    await message.answer_photo(photo=photo,
                               caption=DICTIONARY_RU['REPLY_BUTTONS']['MAIN_KB']['MENU']['ANSWER'],
                               reply_markup=menu_kb)


# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö INLINE-–ú–ï–ù–Æ

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —á–∞–µ–ø–∏—Ç–∏—è

@router.callback_query(F.data == DICTIONARY_RU['INLINE_BUTTONS']['MENU']['TEA_PARTIES_BUTTON']['CALLBACK'],
                       StateFilter(default_state))
async def process_tea_parties_button_press(callback: CallbackQuery):
    logger.info(f'chat_id = {callback.message.chat.id} - user_id = {callback.message.from_user.id}')
    photo = FSInputFile(r"C:\Users\1\Desktop\For TeaPot_tg\TeaPot_tg\teapot_bot\tea_parties_ru.jpg")
    await callback.message.answer_photo(photo=photo,
                                        caption='–≠—Ç–æ <b>—Ç–≤–æ–∏ —á–∞–µ–ø–∏—Ç–∏—è</b>.\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å',
                                        reply_markup=tea_parties_kb)
    await callback.answer()


# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ó–î–ê–ù–ò–Ø –ß–ê–ï–ü–ò–¢–ò–Ø –ò –ß–ê–Ø

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–æ–≤–æ–µ —á–∞–µ–ø–∏—Ç–∏–µ

@router.callback_query(F.data == DICTIONARY_RU['INLINE_BUTTONS']['TEA_PARTIES']['NEW_PARTY_BUTTON']['CALLBACK'],
                       StateFilter(default_state))
async def process_new_party_button_press(callback: CallbackQuery, state: FSMContext):
    logger.info(f'chat_id = {callback.message.chat.id} - user_id = {callback.from_user.id}')
    await callback.message.answer(text='–û—Ç–ª–∏—á–Ω–æ! <b>–í—ã–±–µ—Ä–∏ —á–∞–π</b>', reply_markup=choice_tea_kb)
    await state.set_state(FSMFillForm.new_tea_party)
    await callback.answer()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–∫–∏ –Ω–æ–≤—ã–π —á–∞–π:

@router.callback_query(F.data == 'new_tea_button_pressed', StateFilter(FSMFillForm.new_tea_party))
async def process_new_tea_button_press(callback: CallbackQuery, state: FSMContext):
    global tea_dict
    tea_dict['type'] = "–Ω–æ–≤—ã–π —á–∞–π"
    logger.info(f'chat_id = {callback.message.chat.id} - user_id = {callback.from_user.id}')
    await callback.message.answer(text='–û—Ç–ª–∏—á–Ω–æ! <b>–í—ã–±–µ—Ä–∏ –≤–∏–¥ —á–∞—è</b>',
                                  reply_markup=tea_kb)
    await state.set_state(FSMFillForm.fill_tea_type)
    await callback.answer()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∞ —á–∞—è; —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—è
@router.callback_query(F.data.startswith('TEA'), StateFilter(FSMFillForm.fill_tea_type))
async def process_fill_tea_type(callback: CallbackQuery, state: FSMContext):
    global tea_dict
    logger.info(f'chat_id = {callback.message.chat.id} - user_id = {callback.from_user.id}')
    tea_dict['user_id'] = callback.from_user.id
    if callback.data == DICTIONARY_RU['INLINE_BUTTONS']['TEA_PARTIES']['TEAS']['SHU_PUER']['CALLBACK']:
        tea_dict['tea_type'] = DICTIONARY_RU['INLINE_BUTTONS']['TEA_PARTIES']['TEAS']['SHU_PUER']['NAME']
    elif callback.data == DICTIONARY_RU['INLINE_BUTTONS']['TEA_PARTIES']['TEAS']['SHEN_PUER']['CALLBACK']:
        tea_dict['tea_type'] = DICTIONARY_RU['INLINE_BUTTONS']['TEA_PARTIES']['TEAS']['SHEN_PUER']['NAME']
    elif callback.data == DICTIONARY_RU['INLINE_BUTTONS']['TEA_PARTIES']['TEAS']['OOLONG']['CALLBACK']:
        tea_dict['tea_type'] = DICTIONARY_RU['INLINE_BUTTONS']['TEA_PARTIES']['TEAS']['OOLONG']['NAME']
    elif callback.data == DICTIONARY_RU['INLINE_BUTTONS']['TEA_PARTIES']['TEAS']['RED_TEA']['CALLBACK']:
        tea_dict['tea_type'] = DICTIONARY_RU['INLINE_BUTTONS']['TEA_PARTIES']['TEAS']['RED_TEA']['NAME']
    elif callback.data == DICTIONARY_RU['INLINE_BUTTONS']['TEA_PARTIES']['TEAS']['WHITE_TEA']['CALLBACK']:
        tea_dict['tea_type'] = DICTIONARY_RU['INLINE_BUTTONS']['TEA_PARTIES']['TEAS']['WHITE_TEA']['NAME']
    elif callback.data == DICTIONARY_RU['INLINE_BUTTONS']['TEA_PARTIES']['TEAS']['GREEN_TEA']['CALLBACK']:
        tea_dict['tea_type'] = DICTIONARY_RU['INLINE_BUTTONS']['TEA_PARTIES']['TEAS']['GREEN_TEA']['NAME']
    elif callback.data == DICTIONARY_RU['INLINE_BUTTONS']['TEA_PARTIES']['TEAS']['BERRY_TEA']['CALLBACK']:
        tea_dict['tea_type'] = DICTIONARY_RU['INLINE_BUTTONS']['TEA_PARTIES']['TEAS']['BERRY_TEA']['NAME']
    elif callback.data == DICTIONARY_RU['INLINE_BUTTONS']['TEA_PARTIES']['TEAS']['FRUIT_TEA']['CALLBACK']:
        tea_dict['tea_type'] = DICTIONARY_RU['INLINE_BUTTONS']['TEA_PARTIES']['TEAS']['FRUIT_TEA']['NAME']
    await callback.message.answer(text='–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—è:</b>')
    await state.set_state(FSMFillForm.fill_tea_name)
    await callback.answer()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—è; —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞
@router.message(StateFilter(FSMFillForm.fill_tea_name))
async def process_fill_name(message: Message, state: FSMContext):
    global tea_dict
    logger.info(f'chat_id = {message.chat.id} - user_id = {message.from_user.id}')
    tea_dict['tea_name'] = message.text
    await message.answer(text='–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å, <b>–µ—Å–ª–∏ —Ö–æ—á–µ—à—å</b> –æ—Ç–ø—Ä–∞–≤—å <b>–≥–æ–¥ –≤—ã–ø—É—Å–∫–∞:</b>\n\n‚ùó<i>–î–∞–Ω–Ω—ã–µ'
                              ' –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–∑–∞–ø–∏—Å–∞—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤–æ –≤–∫–ª–∞–¥–∫–µ "–º–æ–∏ —á–∞–∏"</i>',
                         reply_markup=dont_want_kb)
    await state.set_state(FSMFillForm.fill_prod_year)
    print(tea_dict)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞ —á–∞—è
# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–µ —Ö–æ—á—É; —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–≤–æ–¥ –æ—Ü–µ–Ω–∫–∏ —á–∞—é
@router.message(F.text == DICTIONARY_RU['REPLY_BUTTONS']['SKIP_KB']['NAME'], StateFilter(FSMFillForm.fill_prod_year))
async def process_dont_want_button_press(message: Message, state: FSMContext):
    logger.info(f'chat_id = {message.chat.id} - user_id = {message.from_user.id}')
    await message.answer(text='–¢–µ–ø–µ—Ä—å, <b>–µ—Å–ª–∏ —Ö–æ—á–µ—à—å</b> –æ—Ç–ø—Ä–∞–≤—å <b>–æ—Ü–µ–Ω–∫—É —á–∞—é –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10:</b>'
                              '\n\n‚ùó<i>–î–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–∑–∞–ø–∏—Å–∞—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç '
                              '–≤–æ –≤–∫–ª–∞–¥–∫–µ "–º–æ–∏ —á–∞–∏"</i>',
                         reply_markup=dont_want_kb)
    await state.set_state(FSMFillForm.fill_tea_grade)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞ —á–∞—è; —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–≤–æ–¥ –æ—Ü–µ–Ω–∫–∏ —á–∞—é
@router.message(F.text.isdigit(), StateFilter(FSMFillForm.fill_prod_year))
async def process_prod_year(message: Message, state: FSMContext):
    global tea_dict
    logger.info(f'chat_id = {message.chat.id} - user_id = {message.from_user.id}')
    tea_dict['prod_year'] = int(message.text)
    await message.answer(text='–¢–µ–ø–µ—Ä—å, <b>–µ—Å–ª–∏ —Ö–æ—á–µ—à—å</b> –æ—Ç–ø—Ä–∞–≤—å <b>–æ—Ü–µ–Ω–∫—É —á–∞—é –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10:</b>\n\n‚ùó<i>–î–∞–Ω–Ω—ã–µ'
                              ' –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–∑–∞–ø–∏—Å–∞—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤–æ –≤–∫–ª–∞–¥–∫–µ "–º–æ–∏ —á–∞–∏"</i>',
                         reply_markup=dont_want_kb)
    await state.set_state(FSMFillForm.fill_tea_grade)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ –æ—Ü–µ–Ω–∫–∏ —á–∞—è
# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–µ —Ö–æ—á—É; —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è —á–∞—è
@router.message(F.text == DICTIONARY_RU['REPLY_BUTTONS']['SKIP_KB']['NAME'], StateFilter(FSMFillForm.fill_tea_grade))
async def process_dont_want_tea_grade(message: Message, state: FSMContext):
    logger.info(f'chat_id = {message.chat.id} - user_id = {message.from_user.id}')
    await message.answer(text='–¢–µ–ø–µ—Ä—å, <b>–µ—Å–ª–∏ —Ö–æ—á–µ—à—å,</b> –æ—Ç–ø—Ä–∞–≤—å <b>–æ–ø–∏—Å–∞–Ω–∏–µ —á–∞—è:</b>'
                              '\n\n‚ùó<i>–û–ø–∏—Å–∞–Ω–∏–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–∑–∞–ø–∏—Å–∞—Ç—å –≤ '
                              '–ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤–æ –≤–∫–ª–∞–¥–∫–µ "–º–æ–∏ —á–∞–∏"</i>',
                         reply_markup=dont_want_kb)
    await state.set_state(FSMFillForm.fill_tea_description)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ü–µ–Ω–∫–∏ —á–∞—è; —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è —á–∞—è
@router.message(F.text.isdigit(), StateFilter(FSMFillForm.fill_tea_grade))
async def process_fill_tea_rate(message: Message, state: FSMContext):
    global tea_dict
    logger.info(f'chat_id = {message.chat.id} - user_id = {message.from_user.id}')
    tea_dict['rate'] = message.text
    await message.answer(text='–¢–µ–ø–µ—Ä—å, <b>–µ—Å–ª–∏ —Ö–æ—á–µ—à—å,</b> –æ—Ç–ø—Ä–∞–≤—å <b>–æ–ø–∏—Å–∞–Ω–∏–µ —á–∞—è:</b>'
                              '\n\n‚ùó<i>–û–ø–∏—Å–∞–Ω–∏–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–∑–∞–ø–∏—Å–∞—Ç—å –≤ '
                              '–ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤–æ –≤–∫–ª–∞–¥–∫–µ "–º–æ–∏ —á–∞–∏"</i>',
                         reply_markup=dont_want_kb)
    await state.set_state(FSMFillForm.fill_tea_description)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —á–∞—è
# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–µ —Ö–æ—á—É; —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä–∞–º–º —á–∞—è
@router.message(F.text == DICTIONARY_RU['REPLY_BUTTONS']['SKIP_KB']['NAME'],
                StateFilter(FSMFillForm.fill_tea_description))
async def process_dont_want_tea_descr(message: Message, state: FSMContext):
    logger.info(f'chat_id = {message.chat.id} - user_id = {message.from_user.id}')
    await message.answer(text='–¢–µ–ø–µ—Ä—å, <b>–µ—Å–ª–∏ —Ö–æ—á–µ—à—å, </b>–æ—Ç–ø—Ä–∞–≤—å <b>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º —á–∞—è:</b>',
                         reply_markup=dont_want_kb)
    await state.set_state(FSMFillForm.fill_grams_amount)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–∏—Å–∞–Ω–∏—è —á–∞—è
@router.message(StateFilter(FSMFillForm.fill_tea_description))
async def process_fill_tea_descr(message: Message, state: FSMContext):
    global tea_dict
    tea_dict['descr'] = message.text
    logger.info(f'chat_id = {message.chat.id} - user_id = {message.from_user.id}')
    await message.answer(text='–¢–µ–ø–µ—Ä—å, <b>–µ—Å–ª–∏ —Ö–æ—á–µ—à—å, </b>–æ—Ç–ø—Ä–∞–≤—å <b>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º —á–∞—è:</b>',
                         reply_markup=dont_want_kb)
    print(tea_dict)
    await state.set_state(FSMFillForm.fill_grams_amount)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥—Ä–∞–º–º —á–∞—è
# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–µ —Ö–æ—á—É; —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–≤–æ–¥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–æ–¥—ã
@router.message(F.text == DICTIONARY_RU['REPLY_BUTTONS']['SKIP_KB']['NAME'], StateFilter(FSMFillForm.fill_grams_amount))
async def process_dont_want_grams_amount(message: Message, state: FSMContext):
    logger.info(f'chat_id = {message.chat.id} - user_id = {message.from_user.id}')
    await message.answer(text='–¢–µ–ø–µ—Ä—å, <b>–µ—Å–ª–∏ —Ö–æ—á–µ—à—å, </b> –æ—Ç–ø—Ä–∞–≤—å <b>—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤–æ–¥—ã:</b>')
    await state.set_state(FSMFillForm.fill_water_temp)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥—Ä–∞–º–º–æ–≤ —á–∞—è; —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–≤–æ–¥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–æ–¥—ã
@router.message(F.text.isdigit(), StateFilter(FSMFillForm.fill_grams_amount))
async def process_fill_grams_amount(message: Message, state: FSMContext):
    global party_dict
    logger.info(f'chat_id = {message.chat.id} - user_id = {message.from_user.id}')
    party_dict['user_id'] = message.from_user.id
    party_dict['grams'] = message.text
    await message.answer(text='–¢–µ–ø–µ—Ä—å, <b>–µ—Å–ª–∏ —Ö–æ—á–µ—à—å, </b> –æ—Ç–ø—Ä–∞–≤—å <b>—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤–æ–¥—ã:</b>')
    await state.set_state(FSMFillForm.fill_water_temp)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–æ–¥—ã
# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–µ —Ö–æ—á—É; –∫–æ–Ω–µ—Ü —Å–æ–∑–¥–∞–Ω–∏—è —á–∞–µ–ø–∏—Ç–∏—è
@router.message(F.text == DICTIONARY_RU['REPLY_BUTTONS']['SKIP_KB']['NAME'], StateFilter(FSMFillForm.fill_water_temp))
async def process_dont_want_water_temp(message: Message, state: FSMContext):
    logger.info(f'chat_id = {message.chat.id} - user_id = {message.from_user.id}')
    await message.answer(text='–æ–∫',
                         reply_markup=start_kb)
    await state.set_state(default_state)


@router.message(F.text.isdigit(), StateFilter(FSMFillForm.fill_water_temp))
async def process_fill_water_temp(message: Message, state: FSMContext):
    global tea_dict
    global party_dict
    party_dict['water_temp'] = message.text
    logger.info(f'chat_id = {message.chat.id} - user_id = {message.from_user.id}')
    if tea_dict['type'] == '–Ω–æ–≤—ã–π —á–∞–π':
        await message.answer(text=f'<b>–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —Ç–æ–±–æ—é –¥–∞–Ω–Ω—ã–µ:</b>'
                                  f'\n\n<b>–¢–∏–ø —á–∞—è:</b> <u>{tea_dict['type']}</u>'
                                  f'\n\n\t\t\t<i>–í–∏–¥ —á–∞—è:</i> {tea_dict['tea_type']}'
                                  f'\n\t\t\t<i>–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—è:</i> {tea_dict['tea_name']}'
                                  f'\n\t\t\t<i>–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞ —á–∞—è:</i> {tea_dict['prod_year']}'
                                  f'\n\t\t\t<i>–û—Ü–µ–Ω–∫–∞ —á–∞—é:</i> {tea_dict['rate']}'
                                  f'\n\t\t\t<i>–û–ø–∏—Å–∞–Ω–∏–µ —á–∞—è:</i> {tea_dict['descr']}'
                                  f'\n\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º:</b> {party_dict['grams']}'
                                  f'\n<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–æ–¥—ã:</b> {party_dict['water_temp']}',
                             reply_markup=confirm_kb)
    await state.set_state(FSMFillForm.confirm_state)
    print(party_dict)


@router.callback_query(F. StateFilter(FSMFillForm.confirm_state))
async def process_confirm_data(callback: CallbackQuery, state: FSMContext):
    logger.info(f'chat_id = {callback.chat.id} - user_id = {callback.from_user.id}')
    # –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await callback.message.answer(text='!!!', reply_markup=start_kb)
    await callback.answer()
    await state.set_state(default_state)


@router.callback_query(F.data == DICTIONARY_RU['INLINE_BUTTONS']['MENU']['MY_TEA_BUTTON']['CALLBACK'],
                       StateFilter(default_state))
async def process_new_button_press(callback: CallbackQuery):
    logger.info(f'chat_id = {callback.chat.id} - user_id = {callback.from_user.id}')
    photo = FSInputFile(r'C:\Users\1\Desktop\For TeaPot_tg\TeaPot_tg\teapot_bot\my_tea_ru.jpg')
    await callback.message.answer_photo(photo=photo, caption="–≠—Ç–æ —Ç–≤–æ–∏ —á–∞–∏")
    await callback.answer()


@router.callback_query(F.data == "REMINDERS_BUTTON_PRESSED")
async def process_reminder_button_press(callback: CallbackQuery):
    logger.info(f'chat_id = {callback.message.chat.id} - user_id = {callback.message.from_user.id}')
    await callback.message.edit_caption(caption='heh')
    await callback.answer()


@router.message(F.text == DICTIONARY_RU['REPLY_BUTTONS']['MAIN_KB']['SETTINGS']['NAME'])
async def settings_button_handler(message: Message):
    logger.info(f'chat_id = {message.chat.id} - user_id = {message.from_user.id}')
    photo = FSInputFile(r'C:\Users\1\Desktop\For TeaPot_tg\TeaPot_tg\teapot_bot\settings_ru.jpg')
    await message.answer_photo(photo=photo, caption=DICTIONARY_RU['REPLY_BUTTONS']['MAIN_KB']['SETTINGS']['ANSWER'])

